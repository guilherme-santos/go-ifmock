package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	ifmock "github.com/guilherme-santos/go-ifmock"
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tifmock [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tifmock [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	typeNames := flag.String("type", "", "comma-separated list of type names; must be set")
	output := flag.String("output", "", "output file name; default srcdir/<type>_mock.go")

	log.SetFlags(0)
	log.SetPrefix("ifmock: ")

	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := ifmock.Generator{}
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.ParsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		g.ParsePackageFiles(args)
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"ifmock %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.PackageName())
	g.Printf("\n")
	g.Printf("import \"testing\"\n") // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.Generate(typeName)
	}

	// Format the output.
	src := g.Format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_mock.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}
